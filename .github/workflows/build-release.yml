name: Build Multi-Platform Releases

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.0)'
        required: true
        default: 'v1.2.0'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Windows EXE
      run: |
        # –°–æ–∑–¥–∞–µ–º spec —Ñ–∞–π–ª –¥–ª—è Windows
        echo 'a = Analysis(["launcher.py"], pathex=[], binaries=[], datas=[("templates", "templates"), ("static", "static"), ("app.py", "."), ("cisco_manager.py", "."), ("requirements.txt", "."), ("README.md", ".")], hiddenimports=["flask", "netmiko", "paramiko", "flask_cors", "werkzeug", "jinja2"], hookspath=[], hooksconfig={}, runtime_hooks=[], excludes=[], noarchive=False)
        pyz = PYZ(a.pure)
        exe = EXE(pyz, a.scripts, a.binaries, a.datas, [], name="CiscoConfigManager", debug=False, bootloader_ignore_signals=False, strip=False, upx=True, upx_exclude=[], runtime_tmpdir=None, console=False, disable_windowed_traceback=False)' > launcher.spec
        
        pyinstaller launcher.spec --clean --noconfirm
    
    - name: Create Windows package
      run: |
        mkdir release-windows
        copy dist\CiscoConfigManager.exe release-windows\
        copy README.md release-windows\
        copy LICENSE release-windows\
        echo "Cisco Configuration Manager for Windows" > release-windows\README.txt
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cisco-config-manager-windows
        path: release-windows/

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Linux executable
      run: |
        # –°–æ–∑–¥–∞–µ–º spec —Ñ–∞–π–ª –¥–ª—è Linux
        cat > launcher.spec << 'EOF'
        a = Analysis(['launcher.py'], pathex=[], binaries=[], 
            datas=[('templates', 'templates'), ('static', 'static'), ('app.py', '.'), 
                   ('cisco_manager.py', '.'), ('requirements.txt', '.'), ('README.md', '.')],
            hiddenimports=['flask', 'netmiko', 'paramiko', 'flask_cors', 'werkzeug', 'jinja2'],
            hookspath=[], hooksconfig={}, runtime_hooks=[], excludes=[], noarchive=False)
        
        pyz = PYZ(a.pure)
        exe = EXE(pyz, a.scripts, a.binaries, a.datas, [], name='CiscoConfigManager',
            debug=False, bootloader_ignore_signals=False, strip=False, upx=True,
            upx_exclude=[], runtime_tmpdir=None, console=False, disable_windowed_traceback=False)
        EOF
        
        pyinstaller launcher.spec --clean --noconfirm
    
    - name: Create Linux package
      run: |
        mkdir release-linux
        cp dist/CiscoConfigManager release-linux/
        cp README.md release-linux/
        cp LICENSE release-linux/
        cp setup.sh release-linux/
        chmod +x release-linux/CiscoConfigManager
        echo "Cisco Configuration Manager for Linux" > release-linux/README.txt
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cisco-config-manager-linux
        path: release-linux/

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build macOS application
      run: |
        # –°–æ–∑–¥–∞–µ–º spec —Ñ–∞–π–ª –¥–ª—è macOS
        cat > launcher.spec << 'EOF'
        a = Analysis(['launcher.py'], pathex=[], binaries=[], 
            datas=[('templates', 'templates'), ('static', 'static'), ('app.py', '.'), 
                   ('cisco_manager.py', '.'), ('requirements.txt', '.'), ('README.md', '.')],
            hiddenimports=['flask', 'netmiko', 'paramiko', 'flask_cors', 'werkzeug', 'jinja2'],
            hookspath=[], hooksconfig={}, runtime_hooks=[], excludes=[], noarchive=False)
        
        pyz = PYZ(a.pure)
        exe = EXE(pyz, a.scripts, a.binaries, a.datas, [], name='CiscoConfigManager',
            debug=False, bootloader_ignore_signals=False, strip=False, upx=True,
            upx_exclude=[], runtime_tmpdir=None, console=False, disable_windowed_traceback=False)
        EOF
        
        pyinstaller launcher.spec --clean --noconfirm
    
    - name: Create macOS package
      run: |
        mkdir release-macos
        cp dist/CiscoConfigManager release-macos/
        cp README.md release-macos/
        cp LICENSE release-macos/
        chmod +x release-macos/CiscoConfigManager
        echo "Cisco Configuration Manager for macOS" > release-macos/README.txt
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cisco-config-manager-macos
        path: release-macos/

  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create release packages
      run: |
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        cd cisco-config-manager-windows && zip -r ../CiscoConfigManager-Windows.zip . && cd ..
        cd cisco-config-manager-linux && tar -czf ../CiscoConfigManager-Linux.tar.gz . && cd ..
        cd cisco-config-manager-macos && tar -czf ../CiscoConfigManager-macOS.tar.gz . && cd ..
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        ls -lh *.zip *.tar.gz
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: üåê Cisco Configuration Manager ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## üéâ Cisco Configuration Manager ${{ steps.get_version.outputs.VERSION }}
          
          ### ‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
          - üåô **–¢–µ–º–Ω—ã–π —Ä–µ–∂–∏–º** —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
          - üîò **–û–¥–Ω–æ–∫–ª—á–∏–∫–æ–≤—ã–π –∑–∞–ø—É—Å–∫** - –≥–æ—Ç–æ–≤—ã–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
          - üì± **–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å** —Å Bootstrap 5
          - ‚ö° **–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞** –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
          
          ### üöÄ –°–∫–∞—á–∞—Ç—å –¥–ª—è –≤–∞—à–µ–π –û–°
          
          | –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ | –§–∞–π–ª | –†–∞–∑–º–µ—Ä | –û–ø–∏—Å–∞–Ω–∏–µ |
          |-----------|------|--------|----------|
          | ü™ü **Windows** | `CiscoConfigManager-Windows.zip` | ~20MB | EXE —Ñ–∞–π–ª —Å GUI –ª–∞—É–Ω—á–µ—Ä–æ–º |
          | üêß **Linux** | `CiscoConfigManager-Linux.tar.gz` | ~20MB | –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª + setup.sh |
          | üçé **macOS** | `CiscoConfigManager-macOS.tar.gz` | ~20MB | –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è macOS |
          
          ### üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
          
          1. **–°–∫–∞—á–∞–π—Ç–µ** –∞—Ä—Ö–∏–≤ –¥–ª—è –≤–∞—à–µ–π –û–°
          2. **–†–∞—Å–ø–∞–∫—É–π—Ç–µ** –∞—Ä—Ö–∏–≤
          3. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ** –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
          4. **–ù–∞–∂–º–∏—Ç–µ** "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å"
          5. **–ñ–¥–∏—Ç–µ** –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
          
          ### üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
          –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ: http://localhost:5000
          
          ### üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞
          - üêõ **–ë–∞–≥–∏:** –°–æ–∑–¥–∞–π—Ç–µ Issue
          - üí° **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:** Pull Requests –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è
          
          ---
          
          **–õ–∏—Ü–µ–Ω–∑–∏—è:** MIT | **–Ø–∑—ã–∫:** –†—É—Å—Å–∫–∏–π | **Python:** 3.7+
        files: |
          CiscoConfigManager-Windows.zip
          CiscoConfigManager-Linux.tar.gz
          CiscoConfigManager-macOS.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
